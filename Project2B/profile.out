Total: 1253 samples
    1118  89.2%  89.2%     1253 100.0% thread_func
      86   6.9%  96.1%       86   6.9% __strcmp_sse42
      37   3.0%  99.0%      103   8.2% SortedList_insert
       7   0.6%  99.6%       29   2.3% SortedList_lookup
       3   0.2%  99.8%        3   0.2% hash
       2   0.2% 100.0%        2   0.2% _init
       0   0.0% 100.0%     1253 100.0% __clone
       0   0.0% 100.0%     1253 100.0% start_thread
ROUTINE ====================== thread_func in /u/ee/ugrad/jiashu/cs111/proj2b/lab2b-804663317/lab2_list.c
  1118   1253 Total samples (flat / cumulative)
     .      .   71:         hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
     .      .   72:     return hash;
     .      .   73: }
     .      .   74: 
     .      .   75: void* thread_func(void* arg)
---
     .      .   76: {
     .      .   77: 	int thread_id = *((int*) arg);
     .      .   78: 	int i;
     .      .   79: 	int ret;
     .      .   80: 	struct timespec func_start_time;
     .      .   81: 	struct timespec func_end_time;
     .      .   82: 	//instering list elements into according hash function mapping
     .      .   83: 	for (i = thread_id; i < num_element; i=i + num_thread)
     .      .   84: 	{	
     .      .   85: 		int hash_ret = hash(element_list[i].key);
     .      .   86: 		int bucket = abs(hash_ret % num_list);
     .      .   87: 		switch(opt_sync)
     .      .   88: 		{
     .      .   89: 			case NO_LOCK:
     .      .   90: 				SortedList_insert(&my_list[bucket].list, &element_list[i]);
     .      .   91: 				break;
     .      .   92: 
     .      .   93: 			case MUTEX:
     .      .   94: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .   95: 				if (ret < 0)
     .      .   96: 				{
     .      .   97: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .   98: 					exit(1);
     .      .   99: 				}
     .      .  100: 
     .      .  101: 				pthread_mutex_lock(&my_list[bucket].mutex);
     .      .  102: 
     .      .  103: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  104: 				if (ret < 0)
     .      .  105: 				{
     .      .  106: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  107: 					exit(1);
     .      .  108: 				}
     .      .  109: 				waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .      .  110: 				SortedList_insert(&my_list[bucket].list, &element_list[i]);
     .      .  111: 				pthread_mutex_unlock(&my_list[bucket].mutex);
     .      .  112: 				break;
     .      .  113: 
     .      .  114: 			case SPIN_LOCK:
     .      .  115: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  116: 				if (ret < 0)
     .      .  117: 				{
     .      .  118: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  119: 					exit(1);
     .      .  120: 				}
   824    824  121: 				while(__sync_lock_test_and_set(&my_list[bucket].lock, 1) == 1);
     .      .  122: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  123: 				if (ret < 0)
     .      .  124: 				{
     .      .  125: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  126: 					exit(1);
     .      .  127: 				}
     .      .  128: 				waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .    103  129: 				SortedList_insert(&my_list[bucket].list, &element_list[i]);
     .      .  130: 				__sync_lock_release(&my_list[bucket].lock);
     .      .  131: 				break;
     .      .  132: 		}
     .      .  133: 	}
     .      .  134: 
     .      .  135: 	int list_length =0;
     .      .  136: 	int sublist_length = 0;
     .      .  137: 	//getting the sublist length and sum up
     .      .  138: 	switch(opt_sync)
     .      .  139: 	{
     .      .  140: 		case NO_LOCK:
     .      .  141: 
     .      .  142: 			for(i = 0; i < num_list; i++)
     .      .  143: 			{
     .      .  144: 				sublist_length = SortedList_length(&my_list[i].list);
     .      .  145: 				if(sublist_length < 0)
     .      .  146: 				{
     .      .  147: 					fprintf(stderr, "Error SortedList_length(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  148: 					exit(2);
     .      .  149: 				}
     .      .  150: 				list_length += sublist_length;
     .      .  151: 			}
     .      .  152: 			if(list_length<0)
     .      .  153: 			{
     .      .  154: 				fprintf(stderr, "Error list length is negative. : %s\n", strerror(errno));
     .      .  155: 				exit(2);
     .      .  156: 			}
     .      .  157: 			break;
     .      .  158: 
     .      .  159: 		case MUTEX:
     .      .  160: 			//grab all the locks
     .      .  161: 			ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  162: 			if (ret < 0)
     .      .  163: 			{
     .      .  164: 				fprintf(stderr, "Error clock_gettime func_start_time: %s\n", strerror(errno));
     .      .  165: 				exit(1);
     .      .  166: 			}
     .      .  167: 			for(i = 0; i < num_list; i++)
     .      .  168: 			{
     .      .  169: 				pthread_mutex_lock(&my_list[i].mutex);
     .      .  170: 			}
     .      .  171: 
     .      .  172: 			ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  173: 			if (ret < 0)
     .      .  174: 			{
     .      .  175: 				fprintf(stderr, "Error clock_gettime func_end_time: %s\n", strerror(errno));
     .      .  176: 				exit(1);
     .      .  177: 			}
     .      .  178: 			waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .      .  179: 
     .      .  180: 			for(i = 0; i < num_list; i++)
     .      .  181: 			{
     .      .  182: 				sublist_length = SortedList_length(&my_list[i].list);
     .      .  183: 				if(sublist_length < 0)
     .      .  184: 				{
     .      .  185: 					fprintf(stderr, "Error SortedList_length() in MUTEX option. SortedList corruption detected. : %s\n", strerror(errno));
     .      .  186: 					exit(2);
     .      .  187: 				}
     .      .  188: 				list_length += sublist_length;
     .      .  189: 			}
     .      .  190: 			if(list_length<0)
     .      .  191: 			{
     .      .  192: 				fprintf(stderr, "Error list length is negative. : %s\n", strerror(errno));
     .      .  193: 				exit(2);
     .      .  194: 			}
     .      .  195: 
     .      .  196: 			for(i = 0; i < num_list; i++)
     .      .  197: 			{
     .      .  198: 				pthread_mutex_unlock(&my_list[i].mutex);
     .      .  199: 			}
     .      .  200: 			break;
     .      .  201: 
     .      .  202: 		case SPIN_LOCK:
     .      .  203: 			ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  204: 			if (ret < 0)
     .      .  205: 			{
     .      .  206: 				fprintf(stderr, "Error clock_gettime func_start_time: %s\n", strerror(errno));
     .      .  207: 				exit(1);
     .      .  208: 			}
     .      .  209: 			for (i = 0; i < num_list; ++i)
     .      .  210: 			{
     .      .  211: 				while(__sync_lock_test_and_set(&my_list[i].lock, 1) == 1);
     .      .  212: 			}
     .      .  213: 
     .      .  214: 			ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  215: 			if (ret < 0)
     .      .  216: 			{
     .      .  217: 				fprintf(stderr, "Error clock_gettime func_end_time: %s\n", strerror(errno));
     .      .  218: 				exit(1);
     .      .  219: 			}
     .      .  220: 			waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .      .  221: 
     .      .  222: 			for(i = 0; i < num_list; i++)
     .      .  223: 			{
     .      .  224: 				sublist_length = SortedList_length(&my_list[i].list);
     .      .  225: 				if(sublist_length < 0)
     .      .  226: 				{
     .      .  227: 					fprintf(stderr, "Error SortedList_length(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  228: 					exit(2);
     .      .  229: 				}
     .      .  230: 				list_length += sublist_length;
     .      .  231: 			}
     .      .  232: 
     .      .  233: 			if(list_length<0)
     .      .  234: 			{
     .      .  235: 				fprintf(stderr, "Error list length is negative. : %s\n", strerror(errno));
     .      .  236: 				exit(2);
     .      .  237: 			}
     .      .  238: 			for (i = 0; i < num_list; ++i)
     .      .  239: 			{
     .      .  240: 				__sync_lock_release(&my_list[i].lock);			
     .      .  241: 			}
     .      .  242: 			break;
     .      .  243: 	}
     .      .  244: 
     .      .  245: 	SortedListElement_t* retrieved;
     .      .  246: 	for (i = thread_id; i < num_element; i=i + num_thread)
     .      .  247: 	{
     .      3  248: 		int hash_ret = hash(element_list[i].key);		
     .      .  249: 		int bucket = abs(hash_ret % num_list);
     .      .  250: 		switch(opt_sync)
     .      .  251: 		{
     .      .  252: 			case NO_LOCK:
     .      .  253: 				retrieved = SortedList_lookup(&my_list[bucket].list, element_list[i].key);
     .      .  254: 				if (retrieved == NULL)
     .      .  255: 				{
     .      .  256: 					fprintf(stderr, "Error SortedList_lookup(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  257: 					exit(2);
     .      .  258: 				}
     .      .  259: 				ret = SortedList_delete(retrieved);
     .      .  260: 				if (ret == 1)
     .      .  261: 				{
     .      .  262: 					fprintf(stderr, "Error SortedList_delete(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  263: 					exit(2);
     .      .  264: 				}
     .      .  265: 				break;
     .      .  266: 
     .      .  267: 			case MUTEX:
     .      .  268: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  269: 				if (ret < 0)
     .      .  270: 				{
     .      .  271: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  272: 					exit(1);
     .      .  273: 				}
     .      .  274: 
     .      .  275: 				pthread_mutex_lock(&my_list[bucket].mutex);
     .      .  276: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  277: 				if (ret < 0)
     .      .  278: 				{
     .      .  279: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  280: 					exit(1);
     .      .  281: 				}
     .      .  282: 				waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .      .  283: 				retrieved = SortedList_lookup(&my_list[bucket].list, element_list[i].key);
     .      .  284: 				if (retrieved == NULL)
     .      .  285: 				{
     .      .  286: 					fprintf(stderr, "Error SortedList_lookup(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  287: 					exit(2);
     .      .  288: 				}				
     .      .  289: 				ret = SortedList_delete(retrieved);
     .      .  290: 				if (ret == 1)
     .      .  291: 				{
     .      .  292: 					fprintf(stderr, "Error SortedList_delete(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  293: 					exit(2);
     .      .  294: 				}
     .      .  295: 				pthread_mutex_unlock(&my_list[bucket].mutex);
     .      .  296: 				break;
     .      .  297: 
     .      .  298: 			case SPIN_LOCK:
     .      .  299: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  300: 				if (ret < 0)
     .      .  301: 				{
     .      .  302: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  303: 					exit(1);
     .      .  304: 				}
   294    294  305: 				while(__sync_lock_test_and_set(&my_list[bucket].lock, 1) == 1);
     .      .  306: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  307: 				if (ret < 0)
     .      .  308: 				{
     .      .  309: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  310: 					exit(1);
     .      .  311: 				}
     .      .  312: 				waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .     29  313: 				retrieved = SortedList_lookup(&my_list[bucket].list, element_list[i].key);
     .      .  314: 				if (retrieved == NULL)
     .      .  315: 				{
     .      .  316: 					fprintf(stderr, "Error SortedList_lookup(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  317: 					exit(2);
     .      .  318: 				}				
     .      .  319: 				ret = SortedList_delete(retrieved);
     .      .  320: 				if (ret == 1)
     .      .  321: 				{
     .      .  322: 					fprintf(stderr, "Error SortedList_delete(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  323: 					exit(2);
     .      .  324: 				}
     .      .  325: 				__sync_lock_release(&my_list[bucket].lock);
     .      .  326: 				break;
     .      .  327: 		}
     .      .  328: 	}
     .      .  329: 	return NULL;
     .      .  330: }
---
     .      .  331: 
     .      .  332: int main(int argc, char ** argv)
     .      .  333: {
     .      .  334: 	//atexit clean up
     .      .  335: 	if(atexit(cleanup) == -1)
ROUTINE ====================== thread_func in /u/ee/ugrad/jiashu/cs111/proj2b/lab2b-804663317/lab2_list.c
  1118   1253 Total samples (flat / cumulative)
     .      .   71:         hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
     .      .   72:     return hash;
     .      .   73: }
     .      .   74: 
     .      .   75: void* thread_func(void* arg)
---
     .      .   76: {
     .      .   77: 	int thread_id = *((int*) arg);
     .      .   78: 	int i;
     .      .   79: 	int ret;
     .      .   80: 	struct timespec func_start_time;
     .      .   81: 	struct timespec func_end_time;
     .      .   82: 	//instering list elements into according hash function mapping
     .      .   83: 	for (i = thread_id; i < num_element; i=i + num_thread)
     .      .   84: 	{	
     .      .   85: 		int hash_ret = hash(element_list[i].key);
     .      .   86: 		int bucket = abs(hash_ret % num_list);
     .      .   87: 		switch(opt_sync)
     .      .   88: 		{
     .      .   89: 			case NO_LOCK:
     .      .   90: 				SortedList_insert(&my_list[bucket].list, &element_list[i]);
     .      .   91: 				break;
     .      .   92: 
     .      .   93: 			case MUTEX:
     .      .   94: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .   95: 				if (ret < 0)
     .      .   96: 				{
     .      .   97: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .   98: 					exit(1);
     .      .   99: 				}
     .      .  100: 
     .      .  101: 				pthread_mutex_lock(&my_list[bucket].mutex);
     .      .  102: 
     .      .  103: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  104: 				if (ret < 0)
     .      .  105: 				{
     .      .  106: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  107: 					exit(1);
     .      .  108: 				}
     .      .  109: 				waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .      .  110: 				SortedList_insert(&my_list[bucket].list, &element_list[i]);
     .      .  111: 				pthread_mutex_unlock(&my_list[bucket].mutex);
     .      .  112: 				break;
     .      .  113: 
     .      .  114: 			case SPIN_LOCK:
     .      .  115: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  116: 				if (ret < 0)
     .      .  117: 				{
     .      .  118: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  119: 					exit(1);
     .      .  120: 				}
   824    824  121: 				while(__sync_lock_test_and_set(&my_list[bucket].lock, 1) == 1);
     .      .  122: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  123: 				if (ret < 0)
     .      .  124: 				{
     .      .  125: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  126: 					exit(1);
     .      .  127: 				}
     .      .  128: 				waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .    103  129: 				SortedList_insert(&my_list[bucket].list, &element_list[i]);
     .      .  130: 				__sync_lock_release(&my_list[bucket].lock);
     .      .  131: 				break;
     .      .  132: 		}
     .      .  133: 	}
     .      .  134: 
     .      .  135: 	int list_length =0;
     .      .  136: 	int sublist_length = 0;
     .      .  137: 	//getting the sublist length and sum up
     .      .  138: 	switch(opt_sync)
     .      .  139: 	{
     .      .  140: 		case NO_LOCK:
     .      .  141: 
     .      .  142: 			for(i = 0; i < num_list; i++)
     .      .  143: 			{
     .      .  144: 				sublist_length = SortedList_length(&my_list[i].list);
     .      .  145: 				if(sublist_length < 0)
     .      .  146: 				{
     .      .  147: 					fprintf(stderr, "Error SortedList_length(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  148: 					exit(2);
     .      .  149: 				}
     .      .  150: 				list_length += sublist_length;
     .      .  151: 			}
     .      .  152: 			if(list_length<0)
     .      .  153: 			{
     .      .  154: 				fprintf(stderr, "Error list length is negative. : %s\n", strerror(errno));
     .      .  155: 				exit(2);
     .      .  156: 			}
     .      .  157: 			break;
     .      .  158: 
     .      .  159: 		case MUTEX:
     .      .  160: 			//grab all the locks
     .      .  161: 			ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  162: 			if (ret < 0)
     .      .  163: 			{
     .      .  164: 				fprintf(stderr, "Error clock_gettime func_start_time: %s\n", strerror(errno));
     .      .  165: 				exit(1);
     .      .  166: 			}
     .      .  167: 			for(i = 0; i < num_list; i++)
     .      .  168: 			{
     .      .  169: 				pthread_mutex_lock(&my_list[i].mutex);
     .      .  170: 			}
     .      .  171: 
     .      .  172: 			ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  173: 			if (ret < 0)
     .      .  174: 			{
     .      .  175: 				fprintf(stderr, "Error clock_gettime func_end_time: %s\n", strerror(errno));
     .      .  176: 				exit(1);
     .      .  177: 			}
     .      .  178: 			waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .      .  179: 
     .      .  180: 			for(i = 0; i < num_list; i++)
     .      .  181: 			{
     .      .  182: 				sublist_length = SortedList_length(&my_list[i].list);
     .      .  183: 				if(sublist_length < 0)
     .      .  184: 				{
     .      .  185: 					fprintf(stderr, "Error SortedList_length() in MUTEX option. SortedList corruption detected. : %s\n", strerror(errno));
     .      .  186: 					exit(2);
     .      .  187: 				}
     .      .  188: 				list_length += sublist_length;
     .      .  189: 			}
     .      .  190: 			if(list_length<0)
     .      .  191: 			{
     .      .  192: 				fprintf(stderr, "Error list length is negative. : %s\n", strerror(errno));
     .      .  193: 				exit(2);
     .      .  194: 			}
     .      .  195: 
     .      .  196: 			for(i = 0; i < num_list; i++)
     .      .  197: 			{
     .      .  198: 				pthread_mutex_unlock(&my_list[i].mutex);
     .      .  199: 			}
     .      .  200: 			break;
     .      .  201: 
     .      .  202: 		case SPIN_LOCK:
     .      .  203: 			ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  204: 			if (ret < 0)
     .      .  205: 			{
     .      .  206: 				fprintf(stderr, "Error clock_gettime func_start_time: %s\n", strerror(errno));
     .      .  207: 				exit(1);
     .      .  208: 			}
     .      .  209: 			for (i = 0; i < num_list; ++i)
     .      .  210: 			{
     .      .  211: 				while(__sync_lock_test_and_set(&my_list[i].lock, 1) == 1);
     .      .  212: 			}
     .      .  213: 
     .      .  214: 			ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  215: 			if (ret < 0)
     .      .  216: 			{
     .      .  217: 				fprintf(stderr, "Error clock_gettime func_end_time: %s\n", strerror(errno));
     .      .  218: 				exit(1);
     .      .  219: 			}
     .      .  220: 			waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .      .  221: 
     .      .  222: 			for(i = 0; i < num_list; i++)
     .      .  223: 			{
     .      .  224: 				sublist_length = SortedList_length(&my_list[i].list);
     .      .  225: 				if(sublist_length < 0)
     .      .  226: 				{
     .      .  227: 					fprintf(stderr, "Error SortedList_length(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  228: 					exit(2);
     .      .  229: 				}
     .      .  230: 				list_length += sublist_length;
     .      .  231: 			}
     .      .  232: 
     .      .  233: 			if(list_length<0)
     .      .  234: 			{
     .      .  235: 				fprintf(stderr, "Error list length is negative. : %s\n", strerror(errno));
     .      .  236: 				exit(2);
     .      .  237: 			}
     .      .  238: 			for (i = 0; i < num_list; ++i)
     .      .  239: 			{
     .      .  240: 				__sync_lock_release(&my_list[i].lock);			
     .      .  241: 			}
     .      .  242: 			break;
     .      .  243: 	}
     .      .  244: 
     .      .  245: 	SortedListElement_t* retrieved;
     .      .  246: 	for (i = thread_id; i < num_element; i=i + num_thread)
     .      .  247: 	{
     .      3  248: 		int hash_ret = hash(element_list[i].key);		
     .      .  249: 		int bucket = abs(hash_ret % num_list);
     .      .  250: 		switch(opt_sync)
     .      .  251: 		{
     .      .  252: 			case NO_LOCK:
     .      .  253: 				retrieved = SortedList_lookup(&my_list[bucket].list, element_list[i].key);
     .      .  254: 				if (retrieved == NULL)
     .      .  255: 				{
     .      .  256: 					fprintf(stderr, "Error SortedList_lookup(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  257: 					exit(2);
     .      .  258: 				}
     .      .  259: 				ret = SortedList_delete(retrieved);
     .      .  260: 				if (ret == 1)
     .      .  261: 				{
     .      .  262: 					fprintf(stderr, "Error SortedList_delete(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  263: 					exit(2);
     .      .  264: 				}
     .      .  265: 				break;
     .      .  266: 
     .      .  267: 			case MUTEX:
     .      .  268: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  269: 				if (ret < 0)
     .      .  270: 				{
     .      .  271: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  272: 					exit(1);
     .      .  273: 				}
     .      .  274: 
     .      .  275: 				pthread_mutex_lock(&my_list[bucket].mutex);
     .      .  276: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  277: 				if (ret < 0)
     .      .  278: 				{
     .      .  279: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  280: 					exit(1);
     .      .  281: 				}
     .      .  282: 				waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .      .  283: 				retrieved = SortedList_lookup(&my_list[bucket].list, element_list[i].key);
     .      .  284: 				if (retrieved == NULL)
     .      .  285: 				{
     .      .  286: 					fprintf(stderr, "Error SortedList_lookup(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  287: 					exit(2);
     .      .  288: 				}				
     .      .  289: 				ret = SortedList_delete(retrieved);
     .      .  290: 				if (ret == 1)
     .      .  291: 				{
     .      .  292: 					fprintf(stderr, "Error SortedList_delete(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  293: 					exit(2);
     .      .  294: 				}
     .      .  295: 				pthread_mutex_unlock(&my_list[bucket].mutex);
     .      .  296: 				break;
     .      .  297: 
     .      .  298: 			case SPIN_LOCK:
     .      .  299: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_start_time);
     .      .  300: 				if (ret < 0)
     .      .  301: 				{
     .      .  302: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  303: 					exit(1);
     .      .  304: 				}
   294    294  305: 				while(__sync_lock_test_and_set(&my_list[bucket].lock, 1) == 1);
     .      .  306: 				ret = clock_gettime(CLOCK_MONOTONIC, &func_end_time);
     .      .  307: 				if (ret < 0)
     .      .  308: 				{
     .      .  309: 					fprintf(stderr, "Error clock_gettime: %s\n", strerror(errno));
     .      .  310: 					exit(1);
     .      .  311: 				}
     .      .  312: 				waittime_list[thread_id] += (func_end_time.tv_sec - func_start_time.tv_sec)*1000000000 + (func_end_time.tv_nsec - func_start_time.tv_nsec);
     .     29  313: 				retrieved = SortedList_lookup(&my_list[bucket].list, element_list[i].key);
     .      .  314: 				if (retrieved == NULL)
     .      .  315: 				{
     .      .  316: 					fprintf(stderr, "Error SortedList_lookup(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  317: 					exit(2);
     .      .  318: 				}				
     .      .  319: 				ret = SortedList_delete(retrieved);
     .      .  320: 				if (ret == 1)
     .      .  321: 				{
     .      .  322: 					fprintf(stderr, "Error SortedList_delete(). SortedList corruption detected. : %s\n", strerror(errno));
     .      .  323: 					exit(2);
     .      .  324: 				}
     .      .  325: 				__sync_lock_release(&my_list[bucket].lock);
     .      .  326: 				break;
     .      .  327: 		}
     .      .  328: 	}
     .      .  329: 	return NULL;
     .      .  330: }
---
     .      .  331: 
     .      .  332: int main(int argc, char ** argv)
     .      .  333: {
     .      .  334: 	//atexit clean up
     .      .  335: 	if(atexit(cleanup) == -1)
